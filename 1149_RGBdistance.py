# 220531
# RGB거리
# RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
# 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다.
# 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구하는 프로그램
# 규칙1) 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
# 규칙2) N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# 규칙3) i(2 <= i <= N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.

# 입력1) 집의 수 N (2 <= N <= 1,000)
# 입력2) N개의 줄에 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 입력
# 집을 칠하는 비용은 1,000보다 작거나 같은 자연수

# 출력 : 모든 집을 칠하는 비용의 최솟값

# d[i][j] ~ R : j=0, G : j=1, B : j=2
# ex) j = 0 : d[i][j] = min(d[i-1][1], d[i-1][2])

n = int(input())
cost = [[]]
for _ in range(n):
    cost.append(list(map(int, input().split())))

dp = cost[::]

for i in range(2, n + 1):
    for j in range(0, 2 + 1):
        if j == 0:
            dp[i][j] += min(dp[i-1][1], dp[i-1][2])
        elif j == 1:
            dp[i][j] += min(dp[i-1][0], dp[i-1][2])
        else:
            dp[i][j] += min(dp[i-1][0], dp[i-1][1])

print(min(dp[n]))